// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  PASSWORD_RECOVER
}

enum AccountProvider {
  GITHUB
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Account {
  id String @id @default(uuid())
  provider AccountProvider
  providerAccountId String @unique @map("provider_account_id")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model User {
  id String @id @default(uuid())
  name String?
  email String @unique
  passwordHash String? @map("password_hash")
  avatarUrl String? @map("avatar_url")
  createdat DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  tokens Token[]
  accounts Account[]
  invites Invite[]
  member_at Member[]
  owned_organizations Organization[]
  projects Project[]

  @@map("users")
}

model Invite {
  id String @id @default(uuid())
  email String 
  createdat DateTime @default(now()) @map("created_at")
  role Role
  
  author User? @relation(fields: [userId], references: [id])
  userId String? @map("user_id")
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id String @id @default(uuid())
  role Role @default(MEMBER)

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String @map("organization_id")
  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id String @id @default(uuid())
  name String
  slug String @unique
  domain String? @unique
  shouldAttachUsersByDomain Boolean @default(false) @map("should_attach_users_by_domain")
  avatarUrl String? @map("avatar_url")
  createdat DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  owner User @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")
  invites Invite[]
  members Member[]
  projects Project[]

  @@map("organizations")
}

model Project {
  id String @id @default(uuid())
  name String
  slug String @unique
  description String
  avatarUrl String? @map("avatar_url")
  createdat DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  owner User @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String @map("organization_id")

  @@map("projects")
}

model Token {
  id String @id @default(uuid())
  token TokenType
  createdat DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}